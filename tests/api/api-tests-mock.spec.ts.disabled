import { test, expect } from '@playwright/test';
import { TestDataFactory } from '../../src/fixtures/test-data';

test.describe('API Tests', () => {
  const baseURL = 'http://localhost:3001/api';

  test.describe('Authentication API', () => {
    test('should authenticate user with valid credentials', async ({ request }) => {
      const user = TestDataFactory.createUser();
      
      const response = await request.post(`${baseURL}/auth/login`, {
        data: {
          email: user.email,
          password: user.password
        }
      });

      expect(response.status()).toBe(200);
      const responseBody = await response.json();
      expect(responseBody).toHaveProperty('token');
      expect(responseBody).toHaveProperty('user');
    });

    test('should reject invalid credentials', async ({ request }) => {
      const response = await request.post(`${baseURL}/auth/login`, {
        data: {
          email: 'invalid@email.com',
          password: 'wrongpassword'
        }
      });

      expect(response.status()).toBe(401);
      const responseBody = await response.json();
      expect(responseBody).toHaveProperty('error');
    });

    test('should register new user', async ({ request }) => {
      const user = TestDataFactory.createUser();
      
      const response = await request.post(`${baseURL}/auth/register`, {
        data: user
      });

      expect(response.status()).toBe(201);
      const responseBody = await response.json();
      expect(responseBody).toHaveProperty('id');
      expect(responseBody.email).toBe(user.email);
    });
  });

  test.describe('Products API', () => {
    test('should fetch all products', async ({ request }) => {
      const response = await request.get(`${baseURL}/products`);
      
      expect(response.status()).toBe(200);
      const products = await response.json();
      expect(Array.isArray(products)).toBe(true);
      expect(products.length).toBeGreaterThan(0);
    });

    test('should fetch product by ID', async ({ request }) => {
      const response = await request.get(`${baseURL}/products/1`);
      
      expect(response.status()).toBe(200);
      const product = await response.json();
      expect(product).toHaveProperty('id');
      expect(product).toHaveProperty('name');
      expect(product).toHaveProperty('price');
    });

    test('should return 404 for non-existent product', async ({ request }) => {
      const response = await request.get(`${baseURL}/products/99999`);
      expect(response.status()).toBe(404);
    });

    test('should search products', async ({ request }) => {
      const response = await request.get(`${baseURL}/products/search?q=laptop`);
      
      expect(response.status()).toBe(200);
      const results = await response.json();
      expect(Array.isArray(results)).toBe(true);
    });

    test('should filter products by category', async ({ request }) => {
      const response = await request.get(`${baseURL}/products?category=electronics`);
      
      expect(response.status()).toBe(200);
      const products = await response.json();
      expect(Array.isArray(products)).toBe(true);
      
      if (products.length > 0) {
        expect(products[0].category.toLowerCase()).toContain('electronics');
      }
    });
  });

  test.describe('Cart API', () => {
    let authToken: string;

    test.beforeEach(async ({ request }) => {
      const user = TestDataFactory.createUser();
      const loginResponse = await request.post(`${baseURL}/auth/login`, {
        data: { email: user.email, password: user.password }
      });
      const loginData = await loginResponse.json();
      authToken = loginData.token;
    });

    test('should add item to cart', async ({ request }) => {
      const response = await request.post(`${baseURL}/cart/items`, {
        headers: { Authorization: `Bearer ${authToken}` },
        data: {
          productId: '1',
          quantity: 2
        }
      });

      expect(response.status()).toBe(201);
      const cartItem = await response.json();
      expect(cartItem).toHaveProperty('productId');
      expect(cartItem.quantity).toBe(2);
    });

    test('should get cart items', async ({ request }) => {
      const response = await request.get(`${baseURL}/cart`, {
        headers: { Authorization: `Bearer ${authToken}` }
      });

      expect(response.status()).toBe(200);
      const cart = await response.json();
      expect(cart).toHaveProperty('items');
      expect(Array.isArray(cart.items)).toBe(true);
    });

    test('should update cart item quantity', async ({ request }) => {
      await request.post(`${baseURL}/cart/items`, {
        headers: { Authorization: `Bearer ${authToken}` },
        data: { productId: '1', quantity: 1 }
      });

      const response = await request.put(`${baseURL}/cart/items/1`, {
        headers: { Authorization: `Bearer ${authToken}` },
        data: { quantity: 3 }
      });

      expect(response.status()).toBe(200);
      const updatedItem = await response.json();
      expect(updatedItem.quantity).toBe(3);
    });

    test('should remove item from cart', async ({ request }) => {
      await request.post(`${baseURL}/cart/items`, {
        headers: { Authorization: `Bearer ${authToken}` },
        data: { productId: '1', quantity: 1 }
      });

      const response = await request.delete(`${baseURL}/cart/items/1`, {
        headers: { Authorization: `Bearer ${authToken}` }
      });

      expect(response.status()).toBe(204);
    });
  });

  test.describe('Performance Tests', () => {
    test('should respond within acceptable time limits', async ({ request }) => {
      const startTime = Date.now();
      const response = await request.get(`${baseURL}/products`);
      const endTime = Date.now();
      
      expect(response.status()).toBe(200);
      expect(endTime - startTime).toBeLessThan(2000);
    });

    test('should handle concurrent requests', async ({ request }) => {
      const requests = Array(10).fill(null).map(() => 
        request.get(`${baseURL}/products`)
      );

      const responses = await Promise.all(requests);
      
      responses.forEach(response => {
        expect(response.status()).toBe(200);
      });
    });
  });

  test.describe('Error Handling', () => {
    test('should handle malformed JSON', async ({ request }) => {
      const response = await request.post(`${baseURL}/auth/login`, {
        data: 'invalid json',
        headers: { 'Content-Type': 'application/json' }
      });

      expect(response.status()).toBe(400);
    });

    test('should handle missing required fields', async ({ request }) => {
      const response = await request.post(`${baseURL}/auth/login`, {
        data: { email: 'test@example.com' }
      });

      expect(response.status()).toBe(400);
      const responseBody = await response.json();
      expect(responseBody).toHaveProperty('error');
    });
  });
});